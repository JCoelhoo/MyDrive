package pt.tecnico.mydrive.domain;

class MyDrive {
	int entryCounter;
	long guestToken;	
}

class User {
	String name;
	String username;
	String password;
	byte umask;
}

class GuestUser extends User {}

class RootUser extends User {}

class Login {
	long token;
	long lastActivity;
	long timeToLive;
	boolean guest;
}

class Entry {
	String name;
	int entryID;
	byte permissions;
	DateTime lastModified;
}

class PlainFile extends Entry {
	String content;
}

class Directory extends Entry {}

class App extends PlainFile;

class Link extends PlainFile;

class EnvironmentVariable {
	String name;
	String value;
}

class ExecuteAssociation {
	String extension;
}

relation DomainRootHasMyDriveApplication {
	.pt.ist.fenixframework.DomainRoot playsRole domainRoot { multiplicity 0..1; }
	MyDrive playsRole mydrive { multiplicity 0..1; }
}

relation MyDriveRegistersUsers {
	MyDrive playsRole mydrive {multiplicity 1;}
	User playsRole user { multiplicity *; }
}

relation MyDriveRegistersLogins {
	MyDrive playsRole mydrive {multiplicity 1;}
	Login playsRole login { multiplicity *; }
}

relation LoginHasUser {
	Login playsRole login {multiplicity *;}
	User playsRole user {multiplicity 1;}
}

relation LoginHasCurrentDirectory {
	Login playsRole login {multiplicity *;}
	Directory playsRole currentDir {multiplicity 1;}
} 

relation LoginHasEnvironmentVariables {
	Login playsRole login { multiplicity 1; }
	EnvironmentVariable playsRole environmentVariable { multiplicity *; }
}

relation UserOwnsEntries {
	User playsRole owner {multiplicity 1;}
	Entry playsRole entry { multiplicity *; }
}

relation UserHasHome {
	User playsRole; // Directory already inherits user ownership from the Entry superclass
	Directory playsRole home {multiplicity 1;}
}

relation DirectoryContainsEntries {
	Directory playsRole parent {multiplicity 1;}
	Entry playsRole entry { multiplicity *; }
}

relation MyDriveHasRootDirectory {
	MyDrive playsRole mydrive {multiplicity 1;}
	Directory playsRole rootDirectory {multiplicity 1;}
}

relation UserHasExecuteAssociations {
	User playsRole user {multiplicity 1;}
	ExecuteAssociation playsRole executeAssociation {multiplicity *;}
}

relation ExecuteAssociationHasFile {
	ExecuteAssociation playsRole executeAssociation {multiplicity 1;}
	Entry playsRole entry {multiplicity 1;}
}